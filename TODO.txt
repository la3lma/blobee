MAKE THE BASICS WORK
=====================

o Get someone else to use the API and offer feedback.

o Upload to maven central.

o Fix the wire protocol
   -> Review the protobuffer code.
   -> Isolate the wire protocol into a few very sharply
        isolated classes.
   -> Make a test to see if a single type of message
         (instead of the two-step method we use today)
         is comparable in speed with what we do now.


o Generally increase neatness:
   -> Test coverage.
   -> Comments
   -> General ugliness
   -> Inner classes that shouldn't be inner classes.
   -> Collections of hashes that should be refactored
        into fewer hashes.

o Make another test that is a bit more complex to 
  make sure the implementation is actually minimally
  useful.

o Figure out how to involve more people.
   - Design discussions.
   - Code review.
   - Developers.
   - Users.

o Figure out what to do when cancelling invocations.
  Does it even make sense to return values for a cancelled
  invocation? I think not, but now it is possible. Discuss
  and fix.


DISCUSS EXTENSIONS
==================

The purpose of this discussion is to determine their
impact on the current, minimal API design.

o Discuss possible extensions with someone.  Some possibilities are:

    o A listener interface that lets an application have
      a handle on which users/connections etc. is talking to
      it at any time.

    o Collect statistics (usage, timing).

    o Send an userid in the envelope.  Assume that the
      client can do authentication, so that the server can
      perform authorization if it wants to.

    o Streaming results: An invocation can return multiple
      results spread out over time. (combined with the "drop
      ongoing calls" this is actually pretty cool).

    o Source quench:  Let the server send a signal that
      indicates that too much traffic is coming in.


QUALITY IMPROVEMENTS
====================

o Refactor a lot, add comments, dot "i"s cross "t"s. Javadoc everything,
  enhance test coverage, but don't add many new features.  
  Consolidate, consolidate.


o Make some performance tests.  Nothing fancy, but they should be there
  from not very far into the future and forever, with historical record.

   -> Performance (as soon as a stable API is 
      available (arguably it is today).  Run from command line
      as an independent java app.

   -> Benchmark against java RMI. If we're in the same ballpark
      or faster we're pretty well set.
