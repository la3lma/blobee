MAKE THE BASICS WORK
=====================

o Write a better description on how to upload to sonatype/maven central.

o Fix checkstyle objections (not all of them, but the worst ones).

o Look, real hard, to figure out if some or all of the bogusness
  involving reflection to figure out the types of the stuff going
  back and forth over the wire can't be replaced by standard methods
  already produced by the protoc compilation.  A lot of really
  bothersome code could be reduced to nothing if this worked out.

o Harmonize the way methods are described on the serving and
  client ends of a connection.

o When resetting a client controller, it should also be so that
  the controller is not refered to by anything or anyone.

o Get someone else to use the API and offer feedback.

o Set up a demo server somewhere on the intertubes.

o Write an implementation in something else that talks to this
  server written in one or more of:

      - C, because it's minimal.
      - Objective C, because it's so Apple.
      - Haskell because it's awsome.
      - Python because it is useful.

o Generally increase neatness:
   -> Test coverage.
   -> Comments
   -> General ugliness
   -> Inner classes that shouldn't be inner classes.
   -> Collections of hashes that should be refactored
        into fewer hashes.

o Make another test that is a bit more complex to 
  make sure the implementation is actually minimally
  useful.

o Figure out how to involve more people.
   - Design discussions.
   - Code review.
   - Developers.
   - Users.

o Figure out what to do when cancelling invocations.
  Does it even make sense to return values for a cancelled
  invocation? I think not, but now it is possible. Discuss
  and fix.


DISCUSS EXTENSIONS
==================

The purpose of this discussion is to determine their
impact on the current, minimal API design.

o Discuss possible extensions with someone.  Some possibilities are:

    o A listener interface that lets an application have
      a handle on which users/connections etc. is talking to
      it at any time.

    o Collect statistics (usage, timing).

    o Send an userid in the envelope.  Assume that the
      client can do authentication, so that the server can
      perform authorization if it wants to.

    o Streaming results: An invocation can return multiple
      results spread out over time. (combined with the "drop
      ongoing calls" this is actually pretty cool).

    o Source quench:  Let the server send a signal that
      indicates that too much traffic is coming in.


QUALITY IMPROVEMENTS
====================

o Refactor a lot, add comments, dot "i"s cross "t"s. Javadoc everything,
  enhance test coverage, but don't add many new features.  
  Consolidate, consolidate.


o Make some performance tests.  Nothing fancy, but they should be there
  from not very far into the future and forever, with historical record.

   -> Performance (as soon as a stable API is 
      available (arguably it is today).  Run from command line
      as an independent java app.

   -> Benchmark against java RMI. If we're in the same ballpark
      or faster we're pretty well set.
